{"version":3,"sources":["Components/Editor.js","Components/Preview.js","Components/MarkdownBase.js","libs/Redux/actions.js","serviceWorker.js","libs/Redux/reducers.js","libs/Redux/state.js","index.js"],"names":["Editor","_ref","text","updateText","react_default","a","createElement","id","value","onChange","e","target","Preview","markedText","dangerouslySetInnerHTML","markedOptions","gfm","breaks","sanitize","tables","createMarkup","__html","marked","MarkdownPage","connect","state","dispatch","content","type","className","Components_Preview","Components_Editor","href","Boolean","window","location","hostname","match","initialState","defaultReducer","arguments","length","undefined","action","store","createStore","ReactDOM","render","es","Components_MarkdownBase","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAeeA,eAZA,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,KAAMC,EAAiBF,EAAjBE,WAKtB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAUC,GAAG,SAASC,MAAON,EAAMO,SANtB,SAAAC,GACfP,EAAWO,EAAEC,OAAOH,aCETI,SAJC,SAAAX,GAAoB,IAAjBY,EAAiBZ,EAAjBY,WACjB,OAAOT,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUO,wBAAyBD,8BCe9CE,SAAgB,CACpBC,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,QAAQ,IAGJC,EAAe,SAAAlB,GAEnB,MAAO,CAAEmB,OADUC,IAAOpB,EAAMa,KAgCnBQ,EALMC,YA9CG,SAAAC,GACtB,MAAO,CACLvB,KAAMuB,EAAMvB,OAGW,SAAAwB,GACzB,MAAO,CACLvB,WAAY,SAAAwB,GAAO,OAAID,ECZhB,CACHE,KAJiB,YAKjB1B,KDUqCyB,OAuCxBH,CAvBA,SAAAvB,GAA0B,IAAvBC,EAAuBD,EAAvBC,KAAMC,EAAiBF,EAAjBE,WAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,UACbzB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,aACbzB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,gBACbzB,EAAAC,EAAAC,cAACwB,EAAD,CAASjB,WAAYO,EAAalB,MAEpCE,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,eACbzB,EAAAC,EAAAC,cAACyB,EAAD,CAAQ7B,KAAMA,EAAMC,WAAYA,MAGpCC,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,WACbzB,EAAAC,EAAAC,cAAA,eACK,IACHF,EAAAC,EAAAC,cAAA,KAAG0B,KAAK,+BAAR,YACW5B,EAAAC,EAAAC,cAAA,KAAGuB,UAAU,4BElCdI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECfAC,EAAe,CACjBpC,KCJ0B,qrCDiBfqC,EAVQ,WAAkC,IAAjCd,EAAiCe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrD,OAAOC,EAAOf,MACV,IFTiB,YEUjB,MAAO,CAAC1B,KAAMyC,EAAOzC,MAErB,QACA,OAAOuB,IEJTmB,EAAQC,YAAYN,GAC1BO,IAASC,OACL3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUJ,MAAOA,GACbxC,EAAAC,EAAAC,cAAC2C,EAAD,OAENC,SAASC,eAAe,SHmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b750b84e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Editor.css\";\r\n\r\nconst Editor = ({ text, updateText }) => {\r\n  const onChange = e => {\r\n    updateText(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <textarea id=\"editor\" value={text} onChange={onChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport \"../css/Preview.css\";\r\n\r\nconst Preview = ({ markedText }) => {\r\n  return <div id=\"preview\" dangerouslySetInnerHTML={markedText} />;\r\n};\r\n\r\nexport default Preview;\r\n","import React from \"react\";\r\nimport Editor from \"./Editor\";\r\nimport Preview from \"./Preview\";\r\nimport { editText } from \"../libs/Redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport marked from \"marked\";\r\nimport \"../css/Markdown.css\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    text: state.text\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateText: content => dispatch(editText(content))\r\n  };\r\n};\r\n\r\nconst markedOptions = {\r\n  gfm: true,\r\n  breaks: true,\r\n  sanitize: true,\r\n  tables: true\r\n};\r\n\r\nconst createMarkup = text => {\r\n  const markedText = marked(text, markedOptions);\r\n  return { __html: markedText };\r\n};\r\n\r\nconst MarkdownBase = ({ text, updateText }) => {\r\n  return (\r\n    <div className=\"parent\">\r\n      <div className=\"container\">\r\n        <div className=\"preview-item\">\r\n          <Preview markedText={createMarkup(text)} />\r\n        </div>\r\n        <div className=\"editor-item\">\r\n          <Editor text={text} updateText={updateText} />\r\n        </div>\r\n      </div>\r\n      <div className=\"gh-item\">\r\n        <h4>\r\n          by{\" \"}\r\n          <a href=\"https://github.com/Belquira\">\r\n            belquira <i className=\"fab fa-github-alt\" />\r\n          </a>\r\n        </h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MarkdownPage = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MarkdownBase);\r\n\r\nexport default MarkdownPage;\r\n","export const EDIT_TEXT = \"EDIT_TEXT\";\r\n\r\nexport const editText = (text) => {\r\n    return {\r\n        type: EDIT_TEXT,\r\n        text\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { EDIT_TEXT } from \"./actions\";\r\nimport { editorDefaultText } from \"../Redux/state\";\r\n\r\nconst initialState = {\r\n    text: editorDefaultText\r\n}\r\n\r\nconst defaultReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case EDIT_TEXT:\r\n        return {text: action.text};\r\n\r\n        default: \r\n        return state;\r\n    }\r\n}\r\n\r\nexport default defaultReducer;","export const editorDefaultText = `\r\n# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`    \r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n \\`\\`\\` \r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)`\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/MarkdownBase';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport defaultReducer from './libs/Redux/reducers';\n\nconst store = createStore(defaultReducer);\nReactDOM.render(\n    <Provider store={store}>\n        <App /> \n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}